const Joi = require("joi");
const Xfetch = require("./Xfetch");

class Xonedriver {
    static overwrite = {
        Fail: 'fail',
        Rename: 'rename',
        Replace: 'replace'
    }
    constructor(Authorization) {
        this.show = false;
        this.fetch = new Xfetch();
        this.headers = { headers: { Authorization } }
        this.baseUrl = 'https://graph.microsoft.com/v1.0/me/drive/root';
    }

    list(path) {
        this.#show(this.list);
        return this.fetch.get(`${this.baseUrl}${this.#parsePath(path)}/children`, this.headers)
            .then(({ value }) => value?.map(v => ({ name: v.name, id: v.id })) || []).catch(_ => [])
    }
    read(path) {
        let { error } = Joi.string().required().validate(path);
        if (error) throw error;
        this.#show(this.read);
        return this.fetch.get(`${this.baseUrl}${this.#parsePath(path)}/content`, this.headers)
    }
    write(path, text, overwrite = 'fail') {
        let { error } = Joi.object({
            path: Joi.string().required(),
            text: Joi.string().default(''),
            overwrite: Joi.string().valid('fail', 'rename', 'replace').required()
        }).validate({ path, text })
        if (error) throw error;
        this.#show(this.write);
        return this.fetch.put(`${this.baseUrl}${this.#parsePath(path)}/content?@microsoft.graph.conflictBehavior=${overwrite}`, text, { ...this.headers, 'Content-Type': 'text/plain' })
            .then(_ => this.fetch.status < 300)
    }
    delete(path) {
        let { error } = Joi.string().required().validate(path);
        if (error) throw error;
        this.#show(this.delete);
        return this.fetch.delete(`${this.baseUrl}${this.#parsePath(path)}/`, this.headers)
            .then(_ => this.fetch.status < 300)
    }
    mkdir(path, overwrite = 'fail') {
        let { error } = Joi.object({
            path: Joi.string().required(),
            overwrite: Joi.string().valid('fail', 'rename', 'replace').required()
        }).validate({ path, overwrite })
        if (error) throw error;
        this.#show(this.mkdir);
        let name = path.substring(path.lastIndexOf('/') + 1);
        path = this.#parsePath(path.substring(0, path.lastIndexOf('/')));
        return this.fetch.post(`${this.baseUrl}${path}/children`, { name, folder: {}, '@microsoft.graph.conflictBehavior': overwrite }, this.headers)
            .then(({ error }) => error?.code || true).catch()
    }
    #parsePath(path) {
        return path ? `:/${path}:` : '';
    }
    #show(...text) {
        if (this.show) console.log(text);
    }

}

module.exports = Xonedriver;

