const Xcode = require("./Xcode");
const Xfetch = require("./Xfetch");
const Xtime = require("./Xtime");
process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0';

class Xmodem {
    constructor() {
        this.baseUrl = 'https://192.168.1.1';
        this.fetch = new Xfetch();
        this.fetch.filter.values = {
            auth: 'auth'
        };
        this.fetch.filter.regex = {
            CsrfToken: '(?<=NAME="CsrfToken" VALUE=")[^"]+'.toString()
        };

    }
    async change(user, password) {
        await this.fetch.jar.removeAllCookiesSync();
        await this.fetch.get(this.baseUrl).catch();
        const auth = `uid =${user}; psw=${password}`;
        const base64 = Xcode.base64.encode(auth);
        this.fetch.jar.setCookieSync(`base64 = ${base64};path=/;`, `${this.baseUrl}/cgi-bin/login.asp`);
        await this.fetch.post(`${this.baseUrl}/cgi-bin/login.asp`, Xfetch.parseBody({
            StatusActionFlag: '',
            Auth_LoginID: user,
            Auth_Password: password
        })).catch();
        await this.fetch.get(`${this.baseUrl}/cgi-bin/index.asp`).catch();
        if (!this.fetch.data.auth) return;
        this.fetch.jar.setCookieSync(`base64 =;path=/;expires=${new Date(Date.now() - 10000).toGMTString()}`, `${this.baseUrl}/cgi-bin/login.asp`);
        this.fetch.jar.setCookieSync(`md5 = ${this.fetch.data.auth};path=/;`, `${this.baseUrl}/cgi-bin/index.asp`);
        await this.fetch.get(`${this.baseUrl}/cgi-bin/status_wan_summary.asp`).catch();
        if (!this.fetch.data.CsrfToken) return;
        await this.fetch.post(`${this.baseUrl}/cgi-bin/status_wan_summary.asp`, Xfetch.parseBody({
            WAN_VC: 1,
            ACTIVED: 'No',
            ChangeStatusFlag: 1,
            CsrfToken: this.fetch.data.CsrfToken
        })).catch();
        await Xtime.sleep(5000);
        await this.fetch.post(`${this.baseUrl}/cgi-bin/status_wan_summary.asp`, Xfetch.parseBody({
            WAN_VC: 1,
            ACTIVED: 'Yes',
            ChangeStatusFlag: 1,
            CsrfToken: this.fetch.data.CsrfToken
        })).catch();
        while (true) {
            const { ip } = await this.fetch.get('https://api.ipify.org/?format=json').catch(e => { })
            if (ip) return ip;
            await Xtime.sleep(2000);
        }
    }
}

module.exports = Xmodem;

