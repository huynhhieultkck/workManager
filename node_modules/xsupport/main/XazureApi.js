const Xcode = require("./Xcode");
const Xfetch = require("./Xfetch");
const Xerror = require("./Xerror");
const Xfile = require("./Xfile");
const { value } = require("./Xfilter");

class XazureApi {
    constructor() {
        this.fetch = new Xfetch();
    }

    me() {
        this.#show(this.me);
        return this.#callApi(`https://graph.microsoft.com/beta/me/profile`);
    }
    bill() {
        this.#show(this.bill);
        return this.#callApi(`https://management.azure.com/providers/Microsoft.Billing/billingAccounts?$expand=billingProfiles/invoiceSections,billingProfiles,subscriptions,address&includeCAID=true&api-version=2019-10-01-preview`);
    }
    tenants() {
        this.#show(this.tenants);
        if (this.fetch.data.tenants) return Promise.resolve(this.fetch.data.tenants);
        return this.#callApi('https://management.azure.com/tenants?api-version=2020-01-01')
            .then(({ value }) => {
                this.fetch.data.tenants = value || [];
                return this.fetch.data.tenants;
            });
    }
    subscriptions(tenant_id) {
        this.#show(this.subscriptions);
        return this.#requestList(tenant_id, 'https://management.azure.com/subscriptions?api-version=2020-01-01')
            .then(subs => this.#parseSub(subs, tenant_id)).catch(_ => [])
    }
    subscriptionsBilling(tenant_id) {
        this.#show(this.subscriptionsBilling);
        return this.#requestList(tenant_id, 'https://management.azure.com/providers/Microsoft.Billing/billingAccounts?$expand=billingProfiles/invoiceSections,billingProfiles,subscriptions,address&includeCAID=true&api-version=2019-10-01-preview')
            .then(result => result.map(v => v.properties?.subscriptions || []).flat())
            .then(subs => this.#parseSub(subs, tenant_id)).catch(_ => [])
    }
    allSubscriptions(tenant_id, results = []) {
        this.#show(this.allSubscriptions);
        return this.subscriptions(tenant_id)
            .then(subs => { results.push(...subs); return this.subscriptionsBilling(tenant_id); })
            .then(subs => results.concat(subs))
    }
    allSubscriptionsTenants(tenants, results = []) {
        this.#show(this.allSubscriptionsTenants);
        if (!tenants) return this.tenants().then(rs => this.allSubscriptionsTenants(rs));
        if (!tenants.length) return results;
        let tenant = tenants.shift();
        return this.allSubscriptions(tenant.tenantId)
            .then(subs => this.allSubscriptionsTenants(tenants, results.concat(subs)))
    }
    inviteUser(invitedUserEmailAddress) {
        return this.#callApi('https://graph.microsoft.com/v1.0/invitations', {
            invitedUserEmailAddress,
            inviteRedirectUrl: 'https://portal.azure.com/signin/index/',
            sendInvitationMessage: false
        })
    }
    delUser(userPrincipalName) {
        return this.#callApi(`https://graph.microsoft.com/v1.0/users?$filter=mail eq '${userPrincipalName}'`)
            .then(rs => {
                if (rs.value?.at(0)?.id) return this.#callApi(`https://graph.microsoft.com/v1.0/users/${rs.value[0].id}`, null, 'delete').then(_ => true);
                return false;
            })
    }
    changePass(newPass) {
        this.#show(this.changePass);
        return this.#callApi('https://graph.microsoft.com/v1.0/me/changePassword', {
            currentPassword: this.fetch.data.pass,
            newPassword: newPass
        }).then(rs => {
            if (this.fetch.status > 300) return false;
            this.fetch.data.pass = newPass;
            return true;
        })
    }
    allUser(fileName, nextLink, result = []) {
        this.#show(this.allUser);
        return this.#callApi(nextLink || `https://graph.microsoft.com/v1.0/users?$filter=userType eq 'Member'&$top=999`)
            .then(rs => {
                if (fileName) Xfile.writeLine(fileName, rs.value.map(v => Object.values(v).join('	')).join('\n'));
                result = result.concat(rs.value);
                if (rs['@odata.nextLink']) return this.allUser(fileName, rs['@odata.nextLink'], result);
                return result;
            })
    }
    test() {
        this.#callApi(`https://management.azure.com//subscriptions/884f3855-8c88-41db-b078-8bc21c6ffc25?api-version=2016-06-01`)
    }
    #parseSub(subs, tenant_id) {
        return subs.map(sub => ({
            id: sub.subscriptionId || sub.id,
            tenantId: sub.tenantId || tenant_id || null,
            status: sub.state || sub.status || "Unknown",
            displayName: sub.displayName || sub.name || "Unknown",
            quotaId: sub.offerId || sub.subscriptionPolicies?.quotaId || "Unknown",
            suspensionReasons: sub.suspensionReasons || null
        }));
    }
    #requestList(tenant_id, next_link, body, results = []) {
        return this.#callApi(next_link, body, tenant_id)
            .then(({ nextLink, value }) => {
                results.push(...value);
                if (nextLink) return this.#requestList(tenant_id, nextLink, body, results);
                return results;
            })
    }
    #callApi(url, body, tenant_id, method) {
        let type = url.includes('graph.microsoft.com') ? 1 : 2;
        let token = this.fetch.data.token[type][tenant_id || this.fetch.data.token[0].tid];

        // Nếu không có token thì đổi token
        if (!token) return this.#token(tenant_id, type).then(() => this.#callApi(url, body, tenant_id, method));

        let headers = { headers: { Authorization: `Bearer ${token.value}` } }

        if (method == 'put') return this.fetch.put(url, body, headers);
        if (method == 'delete') return this.fetch.delete(url, headers);
        return body ? this.fetch.post(url, body, headers) : this.fetch.get(url, headers);
    }

    #token(tenant_id, type = 1) { // type: 1.Graph,2.Management
        this.#show(this.#token);
        let refresh_token = !!this.fetch.data.refresh_token;
        if (!tenant_id) tenant_id = refresh_token ? this.fetch.data.token[0].tid : 'common';
        let url = `https://login.microsoftonline.com/${tenant_id}/oauth2/v2.0/token`;
        let body = Xfetch.parseBody({
            client_id: this.fetch.data.client_id,
            client_info: 1,
            scope: `https://${type == 1 ? 'graph.microsoft.com' : 'management.core.windows.net'}//.default email openid profile offline_access`,
            grant_type: refresh_token ? 'refresh_token' : 'authorization_code',
            ...(refresh_token
                ? { refresh_token: this.fetch.data.refresh_token }
                : {
                    code: this.fetch.data.codeAuth,
                    redirect_uri: this.fetch.data.redirect_uri, code_verifier: this.fetch.data.code_verifier
                })
        })
        return this.fetch.post(url, body, { headers: { Origin: this.fetch.data.origin } })
            .then(({ access_token }) => {
                if (access_token) {
                    let jwt = Xcode.jwt.decode(access_token);
                    this.fetch.data.token[0] = { ...jwt, value: access_token };
                    this.fetch.data.token[type][jwt.tid] = { ...jwt, value: access_token };
                    return this.#token.name;
                } return Promise.reject(Xerror.TOKEN);
            })
    }
    #show(message) {
        if (this.show) console.log(message);
    }
}

module.exports = XazureApi;

