const Xerror = require("./Xerror");
const Xfetch = require("./Xfetch");

class Xhotmail {
    constructor(client_id, refresh_token) {
        this.fetch = new Xfetch();
        this.client_id = client_id;
        this.refresh_token = refresh_token;
        this.access_token = null;
    }
    async regex(reg) {
        let list = await this.mail();
        for (let m of list) {
            let r = reg.exec(m?.body?.content || '');
            if (r?.at(0)) return r[0];
        }
    }
    async mail() {
        let result = [];
        let rs1 = await this.fetch.get(`https://graph.microsoft.com/v1.0/me/mailFolders/Inbox/messages?$top=3&$orderby=receivedDateTime desc`, { headers: { Authorization: `Bearer ${await this.token()}` } })
        if (rs1?.value) result.push(...rs1.value);
        let rs2 = await this.fetch.get(`https://graph.microsoft.com/v1.0/me/mailFolders/JunkEmail/messages?$top=3&$orderby=receivedDateTime desc`, { headers: { Authorization: `Bearer ${await this.token()}` } })
        if (rs2?.value) result.push(...rs2.value);
        return result;
    }
    async token() {
        if (this.access_token) return this.access_token;
        let { access_token } = await this.fetch.post('https://login.microsoftonline.com/common/oauth2/v2.0/token', Xfetch.parseBody({
            client_id: this.client_id,
            refresh_token: this.refresh_token,
            grant_type: 'refresh_token',
            scope: 'https://graph.microsoft.com/.default'
        })).catch(_ => ({}));
        if (!access_token) throw Xerror.UNKNOWN;
        this.access_token = access_token;
        return access_token;
    }
}

module.exports = Xhotmail;
