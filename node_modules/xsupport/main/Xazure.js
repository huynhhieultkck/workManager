const Joi = require("joi");
const Xcode = require("./Xcode");
const Xfetch = require("./Xfetch");
const { CookieJar } = require("tough-cookie");
const Xerror = require("./Xerror");
const Xfilter = require("./Xfilter");
const cheerio = require("cheerio");
const XazureApi = require("./XazureApi");



class Xazure extends XazureApi {
    constructor(email, pass) {
        super();
        let { error } = Joi.object({
            email: Joi.string().required(),
            pass: Joi.string().required()
        }).validate({ email, pass });
        if (error) throw error;

        email = email.toLowerCase();
        this.fetch = new Xfetch(email);
        this.fetch.headersOption["User-Agent"] = 'Dalvik/2.1.0 (Linux; U; Android 9; SM-G9880 Build/PQ3A.190605.03081104)';
        this.fetch.data = {
            email,
            pass,
            domain: email.split('@')[1],
            client_id: '0c1307d4-29d6-4389-a11c-5cbe7f65d7fa',
            redirect_uri: 'msauth://com.microsoft.azure/335p/HO05f6XAtsAzxtn6RLJPtk=',
            client_request_id: Xcode.uuid.v4(),
            scope: 'https://management.core.windows.net//.default offline_access openid profile',
            ...Xcode.PKCE(43),
            token: { 0: {}, 1: {}, 2: {} }
        };
        this.params = new URLSearchParams({
            scope: this.fetch.data.scope,
            response_type: 'code',
            client_id: this.fetch.data.client_id,
            redirect_uri: this.fetch.data.redirect_uri,
            'client-request-id': this.fetch.data.client_request_id,
            'x-client-SKU': 'MSAL.Xamarin.Android',
            'x-client-Ver': '4.27.1.0',
            'x-client-CPU': 'x86_64',
            'x-client-OS': '28',
            'x-client-DM': 'SM-G9880',
            prompt: 'select_account',
            code_challenge: this.fetch.data.code_challenge,
            code_challenge_method: 'S256',
            sso_reload: true
        });
        this.baseUrl = 'https://login.microsoftonline.com/common/oauth2/v2.0/authorize?';
        this.urlLogin = this.baseUrl + this.params.toString();


        this.#filterCookies();
        this.show = false;

        this.fetch.filter.headers = {
            hpgrequestid: 'x-ms-request-id'
        };
        this.fetch.filter.values = {
            sCtx: 'sCtx',
            sFT: 'sFT',
            canary: 'canary',
            sFT2: 'FlowToken',
            scope: 'scope',
            access_token: 'access_token',
            refresh_token: 'refresh_token',
            id_token: 'id_token',
            client_info: 'client_info',
            urlMsaSignUp: 'urlMsaSignUp',
            PPFT: 'PPFT',
            FederationRedirectUrl: 'FederationRedirectUrl'
        }
        this.fetch.filter.regex = {
            codeAuth: '(?<=code%3d)[^%]+'.toString()
        }
    }


    login() {
        this.#show(this.login);
        return this.fetch.get(this.urlLogin)
            .then(rs => this.#handleLogin());
    }


    #handleLogin(repeat = 0) {
        return Promise.resolve()
            .then(_ => this.#swithLogin(repeat))
            .then(name => {
                //Email k tồn tại
                if (this.#checkValue(['"IfExistsResult":1',
                    'IfExistsResult":2',
                    'ErrorHR":"800478CE',
                    'iErrorCode":500202'])) return Promise.reject(Xerror.EMAIL);
                //Pass sai
                if (name == '#postPass')
                    if (!JSON.stringify(this.fetch.cookies).includes('ESTSAUTH'))
                        if (!JSON.stringify(this.fetch.cookies).includes('MSAAUTH')) return Promise.reject(Xerror.PASS);
                //Login bên thứ 3
                if (this.fetch.data.FederationRedirectUrl) return Promise.reject(Xerror.LOGIN3);
                //Update MFA
                if (this.#checkValue(['ConvergedProofUpRedirect'])) return Promise.reject(Xerror.UPDATE_MFA);
                //MFA
                if (this.#checkValue(['Help us secure your account',
                    'Help us protect your account',
                    'ConvergedTFA'])) return Promise.reject(Xerror.MFA);
                //Lock khóa
                if (this.#checkValue(['Account_ServiceAbuseInterruptPage_Client',
                    'https://aka.ms/compliancelock',
                    'https://aka.ms/AccountAppeal',
                    'HR=80043502',
                    'HR=0xCFFFF',
                    'ErrorHR":"CFFFF',
                    'sErrorCode":"53003"',
                    'sErrorCode":"530003"'])) return Promise.reject(Xerror.LOCKED);
                //Đăng nhập thành công nhưng lỗi 
                if (this.fetch.headers?.location?.includes('finisherror.srf')) return Promise.reject(Xerror.LOGIN);
                //Success
                if (this.fetch.data.codeAuth) return true;

                return this.#handleLogin(repeat + 1);
            })
    }
    #swithLogin(repeat) {
        if (repeat >= 15) return Promise.reject(Xerror.MAXLOOP);
        if (this.fetch.response.includes('login.microsoftonline.com/common/GetCredentialType')) return this.#postEmail();
        if (this.#checkValue(['IfExistsResult":0', 'IfExistsResult":6', 'IfExistsResult":4'])) return this.#postPass();
        if (this.fetch.response.includes('"IfExistsResult":5')) return this.#goUrl(this.fetch.data.urlMsaSignUp.replace(/\\u0026/g, '&').replace('&signup=1&lw=1&fl=easi2', '') + `&username=${this.fetch.data.email}&login_hint=${this.fetch.data.email}`)
        if (this.#checkValue(['>Continue<', '>Working...<'])) return this.#postForm();
    }
    #postEmail() {
        this.#show(this.#postEmail);
        let url = 'https://login.microsoftonline.com/common/GetCredentialType?mkt=vi-VN';
        let body = { "username": this.fetch.data.email, "isOtherIdpSupported": true, "checkPhones": true, "isRemoteNGCSupported": true, "isCookieBannerShown": false, "isFidoSupported": false, "originalRequest": this.fetch.data.sCtx, "country": "US", "forceotclogin": false, "isExternalFederationDisallowed": false, "isRemoteConnectSupported": false, "federationFlags": 0, "isSignup": false, "flowToken": this.fetch.data.sFT, "isAccessPassSupported": true, "isQrCodePinSupported": true }
        return this.fetch.post(url, body)
            .then(_ => this.#postEmail.name)
    }
    #postPass() {
        this.#show(this.#postPass);
        let url = Xfilter.value(this.fetch.response, 'urlPost') || 'https://login.microsoftonline.com/common/login';
        let body = '';
        if (url.includes('login.microsoftonline.com'))
            body = Xfetch.parseBody({ i13: 0, login: this.fetch.data.email, loginfmt: this.fetch.data.email, type: 11, LoginOptions: 3, lrt: '', lrtPartition: '', hisRegion: '', hisScaleUnit: '', passwd: this.fetch.data.pass, ps: 2, psRNGCDefaultType: '', psRNGCEntropy: '', psRNGCSLK: '', canary: this.fetch.data.canary, ctx: this.fetch.data.sCtx, hpgrequestid: this.fetch.data.hpgrequestid, flowToken: this.fetch.data.sFT2, PPSX: '', NewUser: 1, FoundMSAs: '', fspost: 0, i21: 0, CookieDisclosure: 0, IsFidoSupported: 1, isSignupPost: 0, DfpArtifact: '', i19: 35512 });
        else
            body = Xfetch.parseBody({ ps: 2, psRNGCDefaultType: '', psRNGCEntropy: '', psRNGCSLK: '', canary: '', ctx: '', hpgrequestid: '', PPFT: this.fetch.data.PPFT, PPSX: 'PassportR', NewUser: 1, FoundMSAs: '', fspost: 0, i21: 0, CookieDisclosure: 0, IsFidoSupported: 1, isSignupPost: 0, isRecoveryAttemptPost: 0, i13: 0, login: this.fetch.data.email, loginfmt: this.fetch.data.email, type: 11, LoginOptions: 3, lrt: '', lrtPartition: '', hisRegion: '', hisScaleUnit: '', passwd: this.fetch.data.pass });
        return this.fetch.post(url, body)
            .then(_ => this.#postPass.name)
    }
    #goUrl(url = this.urlLogin) {
        this.#show(`${this.#goUrl.name}:${url.substr(0, 100)}`);
        return this.fetch.get(url)
            .then(_ => this.#goUrl.name)
    }
    #postForm() { //Working...
        this.#show(this.#postForm);
        let body = {};
        let $ = cheerio.load(this.fetch.response);
        let form = $("form").first();
        if (!form.length) return this.#postForm.name;
        form.find("input").each((_, element) => {
            let name = $(element).attr("name");
            let value = $(element).attr("value");
            body[name] = value;
        });

        return this.fetch.post(form.attr("action"), Xfetch.parseBody(body))
            .then(_ => this.#postForm.name);
    }
    #filterCookies() {
        let ck = this.fetch.jar.toJSON();
        ck.cookies = ck.cookies.filter(v => !/esctx-|OpenIdConnect.nonce./i.test(v))
        this.fetch.jar = CookieJar.fromJSON(ck);
        this.fetch.addCookie('AADSSO', 'NA|NoExtension', '.login.microsoftonline.com');
        this.fetch.addCookie('SSOCOOKIEPULLED', '1', 'login.microsoftonline.com	');
    }
    #show(message) {
        if (this.show) console.log(message);
    }
    #checkValue(arr) {
        return new RegExp(arr.join('|')).test(this.fetch.response);
    }

    ///////////////////////

}


module.exports = Xazure;

