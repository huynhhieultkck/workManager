const Joi = require("joi");

class Xfilter {

    constructor() {

    }

    static url(text) {
        let { error } = Joi.string().allow('').validate(text);
        if (error) throw error;

        return text.match(/https?:\/\/[^\s/$.?#"].[^\s"]*/g) || [];
    }

    static nameValue(str) {
        let { error } = Joi.string().allow('').validate(str);
        if (error) throw error;

        const regex = /["'`]?([a-zA-Z0-9_-]+)["'`]?\s*:\s*["'`]?(https?:\/\/[^\s,{}[\]"]+|[^"'`,{}\[\]\s]+)["'`]?(?=[,\s}]|$)/g;
        let result = [];
        let match;

        while ((match = regex.exec(str)) !== null) {
            let key = match[1]; // Tên thuộc tính (name)
            let value = match[2]; // Giá trị (value)

            // Chuyển đổi kiểu dữ liệu nếu cần
            if (!isNaN(value)) {
                value = Number(value);
            } else if (value === "true") {
                value = true;
            } else if (value === "false") {
                value = false;
            } else if (value === "null") {
                value = null;
            }

            result.push(`${key}:${value}`);
        }

        return result;
    }

    static value(text, name) {
        let { error } = Joi.object({
            text: Joi.string().allow(''),
            name: Joi.string().required()
        }).validate({ text, name });
        if (error) throw error;

        let result = text.match(new RegExp(`(("${name}")|('${name}')|(\`${name}\`)|${name})\\s*(:|=)\\s*(?<value>("(.*?)")|('(.*?)')|(\`(.*?)\`)|\\d+|true|false|null)`));
        if (!result) result = text.match(new RegExp(`<[^>]+name\\s*=\\s*"${name}"[^>]+value\\s*=\\s*(?<value>("(.*?)")|('(.*?)')|(\`(.*?)\`)|\\d+|true|false|null)`));
        if (result && result.groups && result.groups.value) result = /("|'|`)/.test(result.groups.value[0]) ? result.groups.value.slice(1, -1) : result.groups.value; else return null;
        if (result == 'false') return false;
        if (result == 'true') return true;
        if (result == 'null') return null;
        return result;
    }

    static uuid(text, name) {
        let { error } = Joi.object({
            text: Joi.string().allow(''),
            name: Joi.string().required()
        }).validate({ text, name });
        if (error) throw error;

        let result = text.match(new RegExp(`['"\`]?${name}['"\`]?\\s*(:|=)\\s*['"\`]?(?<value>\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12})`));
        if (result && result.groups && result.groups.value) return result.groups.value;
    }

    static proxy(text) {
        let { error } = Joi.string().allow('').validate(text);
        if (error) throw error;

        let result = text.match(/\d{1,3}.\d{1,3}.\d{1,3}.\d{1,3}:\d+/g);
        return result || [];
    }
}

module.exports = Xfilter;

