const Joi = require("joi");


class Xtime {

    constructor() {

    }

    static sleep(ms = 1000) {
        let { error } = Joi.number().integer().required().validate(ms);
        if (error) throw error;
        return new Promise(rs => setTimeout(rs, ms));
    }
    static async wait(callback) {
        while (await callback()) {
            Xtime.sleep(1000);
        }
    }

    static async speedTestPromise(promiseFunc) {
        const start = Date.now();
        try {
            await promiseFunc;
            return Date.now() - start;
        } catch { return Date.now() - start; }
    }

    static format(format = 'YYYY-MM-DD HH:mm:ss', inputTime = null) {
        const date = inputTime ? new Date(inputTime) : new Date();

        const pad = (num, len = 2) => num.toString().padStart(len, '0');

        const replacements = {
            YYYY: date.getFullYear(),
            YY: pad(date.getFullYear() % 100),
            MM: pad(date.getMonth() + 1),
            DD: pad(date.getDate()),
            HH: pad(date.getHours()),
            mm: pad(date.getMinutes()),
            ss: pad(date.getSeconds()),
            SSS: pad(date.getMilliseconds(), 3),
            SSSSSS: pad(date.getMilliseconds(), 3) + pad(Math.floor(Math.random() * 1000), 3), // giả lập microsecond
        };

        let result = format;

        for (const key of Object.keys(replacements).sort((a, b) => b.length - a.length)) {
            result = result.replace(key, replacements[key]);
        }

        return result;
    }



}

module.exports = Xtime;

