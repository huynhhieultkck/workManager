const Xerror = require("./Xerror");
const Xfetch = require("./Xfetch");
const Xtime = require("./Xtime");

class Xomocaptcha {
    constructor(clientKey) {
        this.fetch = new Xfetch();
        this.clientKey = clientKey;
        this.balance = 0;
        // this.getBalance();


    }
    async getBalance() {
        this.balance = await this.fetch.post('https://omocaptcha.com/v2/getBalance', { clientKey: this.clientKey })
            .then(({ balance }) => balance || 0).catch(_ => 0);
        return this.balance;
    }

    async ImageToText(imageBase64) { return this.createTask({ "type": "ImageToTextTask", imageBase64 }); }
    async RecaptchaV2Token(websiteURL, websiteKey) { return this.createTask({ "type": "RecaptchaV2TokenTask", websiteURL, websiteKey }); }
    async RecaptchaV2Image(imageBase64, question) { return this.createTask({ "type": "RecaptchaV2ImageTask", imageBase64, question }); }
    async RecaptchaV3Token(websiteURL, websiteKey, minScore, pageAction) { return this.createTask({ "type": "RecaptchaV3TokenTask", websiteURL, websiteKey, minScore, pageAction }) }
    async FuncaptchaImage(imageBase64, other) { return this.createTask({ "type": "FuncaptchaImageTask", imageBase64, other }); }
    async Tiktok3DSelectObjectWeb(imageBase64, widthView, heightView) { return this.createTask({ "type": "Tiktok3DSelectObjectWebTask", imageBase64, widthView, heightView }); }
    async Tiktok3DSelectObjectPhone(imageBase64) { return this.createTask({ "type": "Tiktok3DSelectObjectPhoneTask", imageBase64 }); }
    async TiktokRotateWeb(imageBase64s) { return this.createTask({ "type": "TiktokRotateWebTask", imageBase64s }); }
    async TiktokSliderWeb(imageBase64, widthView) { return this.createTask({ "type": "TiktokSliderWebTask", imageBase64, widthView }); }
    async TiktokSliderPhone(imageBase64) { return this.createTask({ "type": "TiktokSliderPhoneTask", imageBase64 }); }
    async ShopeeSliderWeb(imageBase64s) { return this.createTask({ "type": "ShopeeSliderWebTask", imageBase64s }); }
    async ZaloSliderPhone(imageBase64) { return this.createTask({ "type": "ZaloSliderPhoneTask", imageBase64 }); }
    async ZaloSelectObject(imageBase64, other) { return this.createTask({ "type": "ZaloSelectObjectTask", imageBase64, other }); }


    async createTask(task) {
        return this.fetch.post('https://omocaptcha.com/v2/createTask', { "clientKey": this.clientKey, task })
            .then(({ taskId }) => taskId ? this.getTaskResult(taskId) : Promise.reject(Xerror.SOLVE_CAPTCHA))
            .catch(_ => Promise.reject(Xerror.SOLVE_CAPTCHA));
    }

    async getTaskResult(taskId) {
        let i = 0;
        while (i < 90) {
            i++;
            let rt = await this.fetch.post('https://omocaptcha.com/v2/getTaskResult', { "clientKey": this.clientKey, taskId }).catch(_ => { });
            if (rt?.solution) return rt.solution;
            if (rt?.errorId == 1) return Promise.reject(Xerror.SOLVE_CAPTCHA);
            await Xtime.sleep(1000);
        }
        return Promise.reject(Xerror.SOLVE_CAPTCHA);
    }
}

class Xcapmonster {
    constructor(clientKey) {
        this.fetch = new Xfetch();
        this.clientKey = clientKey;
        this.balance = 0;
        // this.getBalance();


    }
    async getBalance() {
        this.balance = await this.fetch.post('https://api.capmonster.cloud/getBalance', { clientKey: this.clientKey })
            .then(({ balance }) => balance || 0).catch(_ => 0);
        return this.balance;
    }

    async RecaptchaV2(websiteURL, websiteKey, ...option) { return this.createTask({ "type": "RecaptchaV2Task", websiteURL, websiteKey, ...option }); }
    async RecaptchaV3Proxyless(websiteURL, websiteKey, ...option) { return this.createTask({ "type": "RecaptchaV3TaskProxyless", websiteURL, websiteKey, ...option }); }
    async RecaptchaV2Enterprise(websiteURL, websiteKey, ...option) { return this.createTask({ "type": "RecaptchaV2EnterpriseTask", websiteURL, websiteKey, ...option }); }
    async GeeTest(websiteURL, gt, challenge, version, ...option) { return this.createTask({ "type": "GeeTestTask", websiteURL, gt, challenge, version, ...option }); }
    async CloudFlareV1(websiteURL, websiteKey, ...option) { return this.createTask({ "type": "TurnstileTaskProxyless", websiteURL, websiteKey, ...option }); }
    async CloudFlareV2(websiteURL, websiteKey, cloudflareTaskType, pageAction, userAgent, data, pageData, ...option) { return this.createTask({ "type": "TurnstileTaskProxyless", websiteURL, websiteKey, cloudflareTaskType, pageAction, userAgent, data, pageData, ...option }); }
    async CloudFlareV3(websiteURL, websiteKey, htmlPageBase64, userAgent, proxyType, proxyAddress, proxyPort, proxyLogin, proxyPassword, ...option) { return this.createTask({ "type": "TurnstileTask", websiteURL, websiteKey, htmlPageBase64, userAgent, proxyType, proxyAddress, proxyPort, proxyLogin, proxyPassword, ...option }); }
    async ComplexImageV1(classs, imagesBase64, metadata, ...option) { return this.createTask({ "type": "ComplexImageTask", class: classs, imagesBase64, metadata, ...option }); }
    async ComplexImageV2(classs, imageUrls, imagesBase64, metadata, ...option) { return this.createTask({ "type": "ComplexImageTask", class: classs, imageUrls, imagesBase64, metadata, ...option }); }
    async ImageToText(body, ...option) { return this.createTask({ "type": "ImageToTextTask", body, ...option }); }
    async DataDome(websiteURL, metadata, ...option) { return this.createTask({ "type": "CustomTask", class: 'DataDome', websiteURL, metadata, ...option }); }
    async Tencent(websiteURL, websiteKey, ...option) { return this.createTask({ "type": "CustomTask", class: 'TenDI', websiteURL, websiteKey, ...option }); }
    async AmazonV1(websiteURL, websiteKey, captchaScript, ...option) { return this.createTask({ "type": "AmazonTaskProxyless", websiteURL, websiteKey, captchaScript, ...option }); }
    async AmazonV2(websiteURL, websiteKey, captchaScript, challengeScript, context, iv, ...option) { return this.createTask({ "type": "AmazonTaskProxyless", websiteURL, websiteKey, captchaScript, challengeScript, context, iv, ...option }); }
    async Basilisk(websiteURL, websiteKey, ...option) { return this.createTask({ "type": "CustomTask", class: 'Basilisk', websiteURL, websiteKey, ...option }); }
    async Imperva(websiteURL, metadata, ...option) { return this.createTask({ "type": "CustomTask", class: 'Imperva', websiteURL, metadata, ...option }); }
    async Binance(websiteURL, websiteKey, validateId, ...option) { return this.createTask({ "type": "BinanceTask", websiteURL, websiteKey, validateId, ...option }); }
    async Prosopo(websiteURL, websiteKey, ...option) { return this.createTask({ "type": "ProsopoTask", websiteURL, websiteKey, ...option }); }
    async Temu(websiteURL, metadata, ...option) { return this.createTask({ "type": "CustomTask", class: 'Temu', websiteURL, metadata, ...option }); }



    async createTask(task) {
        return this.fetch.post('https://api.capmonster.cloud/createTask', { "clientKey": this.clientKey, task })
            .then(({ taskId }) => taskId ? this.getTaskResult(taskId) : Promise.reject(Xerror.SOLVE_CAPTCHA))
            .catch(_ => Promise.reject(Xerror.SOLVE_CAPTCHA));
    }

    async getTaskResult(taskId) {
        let i = 0;
        while (i < 90) {
            i++;
            let rt = await this.fetch.post('https://api.capmonster.cloud/getTaskResult', { "clientKey": this.clientKey, taskId }).catch(_ => { });
            if (rt?.solution) return rt.solution;
            if (rt?.errorId == 1) return Promise.reject(Xerror.SOLVE_CAPTCHA);
            await Xtime.sleep(1000);
        }
        return Promise.reject(Xerror.SOLVE_CAPTCHA);
    }
}


module.exports = {
    Xomocaptcha,
    Xcapmonster
};

